{{ ansible_managed | comment }}
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout connect         5000
    timeout client          50000
    timeout server          50000
    timeout http-keep-alive 900s
    maxconn                 3000

#---------------------------------------------------------------------
# Talos Linux API RoundRobin TCP Load-balancing
#---------------------------------------------------------------------
frontend talos-nodes
  bind *:{{ talos_port | default(50000) }}
  mode tcp
  option tcplog
  default_backend talos-nodes

# Talos Linux Backend Servers
backend talos-nodes
  mode tcp
  balance roundrobin
  option tcplog
  option tcp-check
  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
{% for server in upstream_servers.split(',') %}
  server evo-talos-0{{ loop.index }} {{ server }}:{{ talos_port | default(50000) }} check
{% endfor %}

#---------------------------------------------------------------------
# Kubernetes api-server RoundRobin TCP Load-balancing
#---------------------------------------------------------------------
frontend k8s-control-plane
  bind *:{{ kubeapi_port | default(6443) }}
  mode tcp
  option tcplog
  default_backend k8s-control-plane

# k8s-control-plane apiserver backend
backend k8s-control-plane
  mode tcp
  balance roundrobin
  option tcp-check
{% for server in upstream_servers.split(',') %}
  server evo-k8s-cp-0{{ loop.index }} {{ server }}:{{ kubeapi_port | default(6443) }} check
{% endfor %}
